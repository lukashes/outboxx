name: CI
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  ci:
    name: CI Pipeline
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Setup Nix cache
        uses: cachix/cachix-action@v15
        with:
          name: devenv

      # Code Quality Checks
      - name: Check Zig formatting
        run: nix develop --command zig fmt --check src/

      - name: Run static analysis
        run: |
          nix develop --command zig build --summary all
          echo "Static analysis completed"

      - name: Check for TODO/FIXME comments
        run: |
          if grep -r "TODO\|FIXME\|XXX" src/ --exclude-dir=.git; then
            echo "Found TODO/FIXME comments - please address them"
            exit 1
          fi
          echo "No TODO/FIXME comments found"

      - name: Check function complexity
        run: |
          # Check for overly long functions (> 50 lines)
          nix develop --command bash -c '
            for file in $(find src/ -name "*.zig"); do
              awk "
                /^[[:space:]]*pub fn|^[[:space:]]*fn/ {
                  func_start=NR; func_name=\$0; lines=0
                }
                /^[[:space:]]*}/ && func_start {
                  lines=NR-func_start;
                  if (lines > 50) {
                    print \"Function too long (\" lines \" lines) in \" FILENAME \":\" func_start \": \" func_name
                    exit 1
                  }
                  func_start=0
                }
              " "$file"
            done
            echo "All functions are reasonable length"
          '

      - name: Check memory safety patterns
        run: |
          # Check that allocations have corresponding defers
          nix develop --command bash -c '
            for file in $(find src/ -name "*.zig"); do
              allocations=$(grep -c "\.alloc\|\.dupe\|\.create" "$file" || true)
              defers=$(grep -c "defer.*\.free\|defer.*\.destroy\|defer.*\.deinit" "$file" || true)

              if [ "$allocations" -gt 0 ] && [ "$defers" -eq 0 ]; then
                echo "Warning: $file has allocations but no defer cleanup patterns"
              fi
            done
            echo "Memory safety patterns checked"
          '

      # Build and Test
      - name: Build project
        run: nix develop --command make build

      - name: Run unit tests
        run: nix develop --command make test

      - name: Start PostgreSQL for integration tests
        run: nix develop --command make env-up

      - name: Run integration tests
        run: nix develop --command make test-integration
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432

      - name: Stop test environment
        if: always()
        run: nix develop --command make env-down

